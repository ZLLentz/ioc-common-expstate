# Experiment State Tracker
#
# Record API notes:
#
# * The client should update :StateOptions and :StateOptionsJSON
#   either at startup or when changes to the state options are available.
#   :StateOptions is a waveform of strings, each of which is a valid
#   experimental state. :StateOptionsJSON mirrors :StateOptions and reflects
#   the states in a serialized JSON object representation (which is easily
#   archived and consumed by Python clients).
# * Individual state options are limited to DBF_STRING length (40 chars).
# * The client should write to :StateOptions.INDX when a new state
#   change is desired. This value refers to the array index of the state
#   option as in :StateOptions above.
# * The free-form :UserStatus may be updated as needed and has no real
#   restrictions except its maximum length of the macro USER_STATUS_MAX, which
#   defaults to 1024.
# * The client may monitor :State (or :StateString) 
#   and :State.INDX (or :StateIndex) to get status updates.

record(waveform, "$(P):StateOptions") {
    field(DESC, "All possible experiment states")
    # Array of strings (40 chars):
    field(FTVL, "STRING")
    # Maximum amount of strings:
    field(NELM, "$(MAX_STRINGS=200)")
    field(APST, "On Change")
    field(MPST, "On Change")
    field(PINI, "1")
    info(autosaveFields, "VAL NELM DESC")
}

record(subArray, "$(P):State") {
    field(DESC, "Current experiment state")
    field(FTVL, "STRING")
    # From the array of strings:
    field(INP, "$(P):StateOptions.VAL CP MS")
    # Grab starting the following index:
    field(INDX, "1")
    # Read this many items:
    field(NELM, "1")
    # Buffer must be the same size as the input to read in all values
    field(MALM, "$(MAX_STRINGS=200)")
    info(autosaveFields, "INDX DESC")
    field(FLNK, "$(P):IncUpdate")
}

record(longout, $(P):Update) {
    field(VAL, "0")
    field(PINI, "YES")
}

record(calcout, $(P):IncUpdate) {
    field(INPA, "$(P):Update NPP NMS")
    field(CALC, "(A+1)%1000")
    field(OUT,  "$(P):Update PP")
}

# Some clients (the archiver appliance included) may have issues with the
# subArray and waveform of strings above.  Expose the state index and strings
# as separate records for their convenience:
record(longin, "$(P):StateIndex") {
    field(DESC, "Current experiment state index")
    field(INP, "$(P):State.INDX CP MS")
    info(autosaveFields, "VAL DESC")
}

record(stringin, "$(P):StateString") {
    field(DESC, "Current experiment state string")
    field(INP, "$(P):State.VAL[0] CP MS")
    field(APST, "On Change")
    field(MPST, "On Change")
    info(autosaveFields, "VAL DESC")
}

record(waveform, "$(P):StateOptionsJSON") {
    field(DESC, "StateOptions as a JSON dictionary")
    # Array of char, i.e., a long string:
    field(FTVL, "CHAR")
    # Maximum length of the string:
    field(NELM, "$(OPTIONS_MAX=16384)")
    field(APST, "On Change")
    field(MPST, "On Change")
    field(PINI, "1")
    info(autosaveFields, "VAL DESC")
}

record(waveform, "$(P):UserStatus") {
    field(DESC, "Free-form user-specified status")
    # Array of char, i.e., a long string:
    field(FTVL, "CHAR")
    # Maximum length of the string:
    field(NELM, "$(USER_STATUS_MAX=1024)")
    field(APST, "On Change")
    field(MPST, "On Change")
    field(PINI, "1")
    info(autosaveFields, "VAL DESC")
}
